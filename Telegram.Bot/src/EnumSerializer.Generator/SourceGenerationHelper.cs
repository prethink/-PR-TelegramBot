using Scriban;

namespace EnumSerializer.Generator;

internal static class SourceGenerationHelper
{
    internal const string JsonSerializerOptionsProviderTemplate =
        """
        using System.Collections.Generic;

        namespace Telegram.Bot.Serialization;

        public static partial class JsonSerializerOptionsProvider
        {
            static partial void AddGeneratedConverters(IList<JsonConverter> converters)
            {
                {{~ for enum in enums ~}}
                converters.Add(new global::{{ if enum.namespace }}{{ enum.namespace }}.{{ end }}{{ enum.name }}Converter());
                {{~ end ~}}
            }
        }
        """;

    internal const string ConverterTemplate =
        """
        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by the EnumSerializer.Generator source generator
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------

        #nullable enable

        {{~ if enum_namespace ~}}
        namespace {{ enum_namespace }};
        {{~ end ~}}

        internal partial class {{ enum_name }}Converter : global::System.Text.Json.Serialization.JsonConverter<global::{{ enum_namespace }}.{{ enum_name }}>
        {
            public override void Write(
                global::System.Text.Json.Utf8JsonWriter writer,
                global::{{ enum_namespace }}.{{ enum_name }} value,
                global::System.Text.Json.JsonSerializerOptions options
            ) =>
                writer.WriteStringValue(value switch
                {
                {{~ for enum_member in enum_members ~}}
                    global::{{ enum_namespace }}.{{ enum_name }}.{{enum_member.key}} => "{{ enum_member.value }}",
                {{~ end ~}}
                {{~ if unknown_member ~}}
                    _ => throw new global::System.Text.Json.JsonException(),
                {{~ else ~}}
                    (global::{{ enum_namespace }}.{{ enum_name }})0 => "unknown",
                    _ => throw new global::System.Text.Json.JsonException(),
                {{~ end ~}}
                });

            public override global::{{ enum_namespace }}.{{ enum_name }} Read(
                ref global::System.Text.Json.Utf8JsonReader reader,
                global::System.Type typeToConvert,
                global::System.Text.Json.JsonSerializerOptions options
            ) =>
                !global::System.Text.Json.JsonElement.TryParseValue(ref reader, out var element)
                    ? (global::{{ enum_namespace }}.{{ enum_name }})0
                    : element.Value.ToString() switch
                    {
                    {{~ for enum_member in enum_members ~}}
                        "{{ enum_member.value }}" => global::{{ enum_namespace }}.{{ enum_name }}.{{ enum_member.key }},
                    {{~ end ~}}
                    {{~ if unknown_member ~}}
                        _ => global::{{ enum_namespace }}.{{ enum_name }}.{{ unknown_member }},
                    {{~ else ~}}
                        _ => 0,
                    {{~ end ~}}
                    };
        }
        """;

    internal static string GenerateConverterClass(Template template, EnumInfo enumToGenerate)
    {
        var unknownMember = enumToGenerate.Members.FirstOrDefault(
            e => string.Equals(e.Value, "Unknown", StringComparison.OrdinalIgnoreCase)
            || string.Equals(e.Value, "None", StringComparison.OrdinalIgnoreCase)
        ).Key;

        var result = template.Render(new
        {
            EnumNamespace = enumToGenerate.Namespace,
            EnumName = enumToGenerate.Name,
            EnumMembers = enumToGenerate.Members,
            UnknownMember = unknownMember,
        });

        return result;
    }

    internal static string GenerateOptionsProviderClass(Template template, IEnumerable<EnumInfo> enums)
        => template.Render(new { Enums = enums });
}
